{"ast":null,"code":"var _jsxFileName = \"/Users/charleslucas/Documents/2207-Bootcamp/Demos/PokemonDemo/src/Pokemon.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SinglePokemon from \"./SinglePokemon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Pokemon = () => {\n  _s();\n\n  // Remember state is data that changes overtime, since we're fetching our data from the a database\n  // we want to put our data retrieved from our backend/database in an array container\n  const [pokemon, setPokemon] = useState([]);\n  /* \n  How to write the useEffect hook\n  1. import it from react library \n  2. useEffect takes in some arguments the \n        - first is a function we'll be using an arrow function\n        - the second one is optional, there are reasons for when you want to include it and there are reasons when not to\n  3. Second argument is a dependency list/array - if we leave if blank or place something inside of it is has a certain behavior\n   */\n  // useEffect without a dependecy array it triggers off on every render\n\n  useEffect(() => {\n    console.log(\"I re-rendered\");\n  }); // We need to use useEffect to load our initial data and set our pokemon array in our data to that initial data\n  // This occurs on our first render/mount only!\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Pokemon\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Pokemon, \"4D0jkhGq0ZINAQVoOiMhL4+r3a8=\");\n\n_c = Pokemon;\nexport default Pokemon;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pokemon\");","map":{"version":3,"names":["React","useState","useEffect","SinglePokemon","Pokemon","pokemon","setPokemon","console","log"],"sources":["/Users/charleslucas/Documents/2207-Bootcamp/Demos/PokemonDemo/src/Pokemon.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SinglePokemon from \"./SinglePokemon\";\n\nconst Pokemon = () => {\n  // Remember state is data that changes overtime, since we're fetching our data from the a database\n  // we want to put our data retrieved from our backend/database in an array container\n  const [pokemon, setPokemon] = useState([]);\n\n  /* \n  How to write the useEffect hook\n  1. import it from react library \n  2. useEffect takes in some arguments the \n        - first is a function we'll be using an arrow function\n        - the second one is optional, there are reasons for when you want to include it and there are reasons when not to\n  3. Second argument is a dependency list/array - if we leave if blank or place something inside of it is has a certain behavior\n\n  */\n\n  // useEffect without a dependecy array it triggers off on every render\n  useEffect(() => {\n    console.log(\"I re-rendered\");\n  });\n\n  // We need to use useEffect to load our initial data and set our pokemon array in our data to that initial data\n  // This occurs on our first render/mount only!\n  return <div>Pokemon</div>;\n};\n\nexport default Pokemon;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAEA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EACpB;EACA;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAGE;;EACAC,SAAS,CAAC,MAAM;IACdK,OAAO,CAACC,GAAR,CAAY,eAAZ;EACD,CAFQ,CAAT,CAhBoB,CAoBpB;EACA;;EACA,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAvBD;;GAAMJ,O;;KAAAA,O;AAyBN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}