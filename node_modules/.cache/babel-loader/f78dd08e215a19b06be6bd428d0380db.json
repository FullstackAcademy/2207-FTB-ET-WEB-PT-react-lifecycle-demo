{"ast":null,"code":"var _jsxFileName = \"/Users/charleslucas/Documents/2207-Bootcamp/Demos/PokemonDemo/src/Pokemon.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SinglePokemon from \"./SinglePokemon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Pokemon = () => {\n  _s();\n\n  // state allows us to manage data that is changing in our react app\n  // we are retriving data from our backend/server our data is an array of pokemon\n  // this tells us that our initial state of pokemon is an empty array\n  const [pokemon, setPokemon] = useState([]);\n  /* \n  How to write a the useEffect hook \n  1. import the useEffect hook from react \n  2. useEffect takes in a few arguments\n     --> first one is a function\n     --> second one is optional, and this changes the behavior in how useEffect is used\n  3. The second argument is a dependency list  \n  */\n  // On every render --> if we don't include a second arguement this useEffect will run on every new render/load\n\n  useEffect(() => {\n    console.log(\"I re-rerended\");\n  }); // On the first Render/Mount Only this will load with an empty dependency array as the second argument\n  // We use this whenever we want to fetch data from the backend initially\n  // We want this to run when the page initially loads only once\n\n  useEffect(() => {\n    const fetchPokemon = async () => {\n      // fetch the pokemon sort by id in descending order\n      const response = await fetch(`http://localhost:5000/pokemon?_sort=id&_order=desc`);\n      const data = await response.json();\n      console.log(\"data\", data); // Update our state with our setter function\n\n      setPokemon(data);\n    }; // call our fetch pokemon\n\n\n    fetchPokemon();\n  }, []); // What's return is what is going to display on the screen when the component is called\n  // If we wanted to list or render all the pokemon fetched from our we use map and pass them down as props to our single pokemon component\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Pokemon\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Pokemon, \"Lg1GunKRWOnyi2j92GyxLb/NQLQ=\");\n\n_c = Pokemon;\nexport default Pokemon;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pokemon\");","map":{"version":3,"names":["React","useState","useEffect","SinglePokemon","Pokemon","pokemon","setPokemon","console","log","fetchPokemon","response","fetch","data","json"],"sources":["/Users/charleslucas/Documents/2207-Bootcamp/Demos/PokemonDemo/src/Pokemon.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SinglePokemon from \"./SinglePokemon\";\n\nconst Pokemon = () => {\n  // state allows us to manage data that is changing in our react app\n  // we are retriving data from our backend/server our data is an array of pokemon\n  // this tells us that our initial state of pokemon is an empty array\n  const [pokemon, setPokemon] = useState([]);\n\n  /* \n  How to write a the useEffect hook \n  1. import the useEffect hook from react \n  2. useEffect takes in a few arguments\n     --> first one is a function\n     --> second one is optional, and this changes the behavior in how useEffect is used\n  3. The second argument is a dependency list  \n  */\n\n  // On every render --> if we don't include a second arguement this useEffect will run on every new render/load\n  useEffect(() => {\n    console.log(\"I re-rerended\");\n  });\n\n  // On the first Render/Mount Only this will load with an empty dependency array as the second argument\n  // We use this whenever we want to fetch data from the backend initially\n  // We want this to run when the page initially loads only once\n  useEffect(() => {\n    const fetchPokemon = async () => {\n      // fetch the pokemon sort by id in descending order\n      const response = await fetch(\n        `http://localhost:5000/pokemon?_sort=id&_order=desc`\n      );\n      const data = await response.json();\n      console.log(\"data\", data);\n      // Update our state with our setter function\n      setPokemon(data);\n    };\n    // call our fetch pokemon\n    fetchPokemon();\n  }, []);\n  // What's return is what is going to display on the screen when the component is called\n  // If we wanted to list or render all the pokemon fetched from our we use map and pass them down as props to our single pokemon component\n  return <div>Pokemon</div>;\n};\n\nexport default Pokemon;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAEA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EACpB;EACA;EACA;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAEE;;EACAC,SAAS,CAAC,MAAM;IACdK,OAAO,CAACC,GAAR,CAAY,eAAZ;EACD,CAFQ,CAAT,CAhBoB,CAoBpB;EACA;EACA;;EACAN,SAAS,CAAC,MAAM;IACd,MAAMO,YAAY,GAAG,YAAY;MAC/B;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,oDADyB,CAA5B;MAGA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;MACAN,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBI,IAApB,EAN+B,CAO/B;;MACAN,UAAU,CAACM,IAAD,CAAV;IACD,CATD,CADc,CAWd;;;IACAH,YAAY;EACb,CAbQ,EAaN,EAbM,CAAT,CAvBoB,CAqCpB;EACA;;EACA,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAxCD;;GAAML,O;;KAAAA,O;AA0CN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}